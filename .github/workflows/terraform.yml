name: 'Terraform CI/CD'

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: [self-hosted, terraform, aws, ecs, bi-iac]
    
    # Use this to ensure only one terraform run at a time
    concurrency: terraform
    
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.12.2

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Setup Python for Checkov
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Checkov
      run: |
        python -m pip install --upgrade pip
        pip install checkov

    - name: Run Checkov scan
      id: checkov
      run: |
        checkov -d . --framework terraform --output cli --output sarif --output-file-path reports/results.sarif || true
        echo "Checkov scan completed (exit code ignored for non-blocking)"
      continue-on-error: true

    - name: Upload Checkov Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: checkov-results
        path: reports/
        retention-days: 30

    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -no-color -input=false -out=tfplan
        terraform show -no-color tfplan
      continue-on-error: true

    - name: Upload Plan Artifact
      if: github.event_name == 'pull_request'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: tfplan
        retention-days: 5

    - name: Update Pull Request
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    - name: Notify on Failure
      if: failure()
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          try {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Terraform Pipeline Failed - ${context.sha.substring(0, 7)}`,
              body: `‚ùå Terraform pipeline failed for commit ${context.sha}\n\n**Branch:** ${context.ref}\n**Actor:** @${context.actor}\n**Workflow:** ${context.workflow}\n\n[View Run](${context.payload.repository.html_url}/actions/runs/${context.runId})`,
              labels: ['terraform', 'pipeline-failure']
            });
            console.log('‚úÖ Failure notification issue created successfully');
          } catch (error) {
            console.log('‚ö†Ô∏è Could not create failure notification issue:', error.message);
            console.log('This is likely due to insufficient permissions - issue creation is optional');
          }
